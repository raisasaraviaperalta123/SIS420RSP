# -*- coding: utf-8 -*-
"""regresion_lineal_simple_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NW7qGit1aNIrguvEU5Mn7bOiO-z_H46Z
"""

import os
import numpy as np
from matplotlib import pyplot

# Leer datos
data = np.loadtxt('shoeprices.txt', delimiter=',')
X, y = data[:, 0], data[:,1]
m = y.size

def graficarDatos(x, y):
  fig = pyplot.figure()
  pyplot.plot(x, y, 'ro')
  pyplot.xlabel('Tallas de zapatos')
  pyplot.ylabel('Precios zapatos')

graficarDatos(X, y)

# No olvidarse agregar unos a la matriz de x
X = np.stack([np.ones(m), X], axis=1)

def calcularCosto(X, y, theta):
  m = y.size
  J = 0
  h = np.dot(X, theta)
  # print(h)
  J = (1/(2 * m)) * np.sum(np.square(np.dot(X, theta) - y))
  return J

theta=np.array([0.1, 0.0])
JJ = calcularCosto(X, y, theta)
print(f"con theta:{ theta } se obtiene un costo de: {JJ}")

def calcularDescensoGradiente(X, y, theta, alpha, numero_iteraciones):
  m = y.shape[0]
  theta = theta.copy()
  J_historico = []

  for i in range(numero_iteraciones):
    theta = theta - (alpha / m) * (np.dot(X, theta) - y).dot(X)
    J_historico.append(calcularCosto(X, y, theta))

  return theta, J_historico

theta = np.zeros(2)

num_ite = 100000
alpha = 0.001

theta, J_historico = calcularDescensoGradiente(X, y, theta, alpha, num_ite)
print(f"los valores de theta calculados son: { theta }")
print(f"con un costo de: { J_historico[-1]} ")

graficarDatos(X[:, 1], y)
pyplot.plot(X[:,1], np.dot(X, theta), '-')
pyplot.legend(['Datos de entrenamiento', 'regresion lineal'])

y_pred = np.dot([1, 1.3], theta)
print(y_pred)